#!/bin/bash

# Top disk usage
function ducks() {
	du -sh ./* | sort -hr | head -11
}

# Find a service port quickly
function wp() {
	grep --color=auto -E -i "^$1" /etc/services
}

# Which service for which port
function ws() {
	awk '{printf "%s\t", $2} {print $1}' /etc/services | grep -i --color=auto "^$1/"
}

# Easily edit script in PATH
function es() {
	local script prev
	script="$(which "$1")"
	prev="$PWD"
	cd "$(dirname "$script")" || exit 1
	vim "$script"
	cd "$prev" || exit 1
}

# Unlock my bitwarden session
function bwinit() {
	local pw
	printf 'pw: '
	read -rs pw
	eval "$(bw unlock "$pw" | grep -Eo 'export BW_SESSION=.*')"
}

# Get a password
function bwget() {
	bw get password "$1" | xsel -b
}

# Use fd instead of the default find
function _fzf_compgen_path() {
	rg --files --hidden --follow --glob "!.git/**" --glob "!build/**" --glob \
		"!node_modules/**" --glob "!vendor/bundle/**" "$1"
}

# Use fd to generate the list for directory completion
function _fzf_compgen_dir() {
	fd --type d --hidden --follow --exclude ".git" . "$1"
}

# fzf find a file to edit in vim
function s() {
	local file prev
	file="$(fzf --preview 'batfile {}' --no-height --reverse --ansi)"
	prev="$PWD"
	cd "$(dirname "$prev/$file")" || exit 1
	[[ "$file" ]] && vim "$prev/$file"
	cd "$prev" || exit 1
}

function z() {
	local file old
	old="$FZF_DEFAULT_COMMAND"
	FZF_DEFAULT_COMMAND="rg --files $HOME/Documents/codingbooks"
	file="$(fzf --no-height --reverse --ansi)"
	[[ "$file" ]] && zathura "$file" &>/dev/null &
	disown
	clear
	FZF_DEFAULT_COMMAND="$old"
}

function r() {
	local file old
	old="$FZF_DEFAULT_COMMAND"
	FZF_DEFAULT_COMMAND="rg --files --glob '*.pdf' --glob '*.epub' $HOME/toread"
	file="$(fzf --no-height --reverse --ansi)"
	[[ "$file" ]] && zathura "$file" &>/dev/null &
	disown
	clear
	FZF_DEFAULT_COMMAND="$old"
}

# fzf find a man page
function m() {
	man -k . | fzf -q "$1" --prompt='man> ' --reverse \
		--preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man' |
		tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}

# nnn
function n() {
	if [[ -n $NNNLVL ]] && ((${NNNLVL:-0} >= 1)); then
		echo "nnn is already running"
		return
	fi

	export NNN_TMPFILE="$HOME/.config/nnn/.lastd"
	nnn -c "$@"

	if [[ -f $NNN_TMPFILE ]]; then
		. "$NNN_TMPFILE"
		rm -f "$NNN_TMPFILE" >/dev/null
	fi
}

function oz() {
	zathura "${@}" &>/dev/null &
	disown
	clear
}
