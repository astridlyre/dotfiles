#!/bin/bash
#
# getsecret: get some important life numbers from an
#   encrypted file and print the searched for query
#
# Usage: getsecret query
#

declare SECRETS_ICON
declare SECRETS_NAME
declare -a SECRETS_DATA
declare SECRETS_FILE
declare QUERY

SECRETS_FILE="$HOME/.n.gpg"
QUERY="$1"

# Error handler
function error_exit() {
	printf "\e[0;31m%s: %s\e[0m\n" "${0##*/}" "$@" 1>&2
	exit 0
}

function get_secrets() {
	local in=0
	while read -r line; do
		if ((in == 0)) && [[ $line =~ $QUERY ]]; then
			((in = 1))
			SECRETS_NAME="${line%%:*}"
		elif ((in == 1)); then
			if [[ $line =~ ^end ]]; then
				return 0
			elif [[ $line =~ icon: ]]; then
				echo "$SECRETS_ICON"
				SECRETS_ICON="${line##*icon: }"
			else
				SECRETS_DATA+=("$line")
			fi
		fi
	done <<<"$(gpg --decrypt "$SECRETS_FILE" 2>/dev/null)"
	return 1
}

# Print the secrets
function print_secrets() {
	local key val underline
	underline="───"

	# Initialize secrets data
	get_secrets || error_exit "Search for $QUERY: not found"

	# Nice heading and underline
	printf "\e[1;37m%s  %s\e[0m\n" "$SECRETS_ICON" "$SECRETS_NAME"
	for ((i = 0; i < ${#SECRETS_NAME}; i++)); do
		underline+="─"
	done
	printf "%s\n" "$underline"

	# Print results, splitting by new lines
	for line in "${SECRETS_DATA[@]}"; do
		key="$(cut -d':' -f1 <<<"$line")"
		val="$(cut -d':' -f2 <<<"$line")"
		printf "\e[0;36m%s:\e[0;32m%s\e[0m\n" "$key" "$val"
	done
	return 0
}

[[ -e "$HOME/.n.gpg" ]] || error_exit "No secrets file"
[[ -r "$HOME/.n.gpg" ]] || error_exit "Unable to read secrets file"
print_secrets || error_exit "Unable to print secrets"

# eof
