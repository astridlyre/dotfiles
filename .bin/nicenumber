#!/bin/bash
# Nice number takes a number and presents it in comma-separated form
# Accepts DD (decimal point delimiter) and TD (thousands delimiter)
# as environment variables
declare -a NUMBER_ARRAY

# create_number_array creates a number array
create_number_array() {
  local inital="$1"

  while ((inital > 999)); do
    NUMBER_ARRAY+=("${inital: -3}")
    inital="${inital:0:-3}"
  done
  NUMBER_ARRAY+=("$inital")
}

# nicenumber formats a number into human readable format
nicenumber() {
  # Decimal is assumed to be floating point separator

  local integer="${1%.*}"     # Left of decimal
  local decimal="${1#*.}"     # Right of decimal

  # Check if number has a decimal portion
  if [[ "$decimal" != "$1" ]]; then
    result="${DD:=.}$decimal"
  fi

  create_number_array "$integer"

  for n in "${NUMBER_ARRAY[@]}"; do
    nicenum="$n${TD:-,}$nicenum"
  done

  echo "${nicenum:0:-1}$result"
}

usage() {
  echo "Usage: ${0%%*/} [-d c] [-t c] number"
  echo "  -d specifies the decimal point delimiter"
  echo "  -t specifies the thousands delimiter"
  exit 0
}

# If passed -h or --help show usage
for arg in "$@"; do
  if [[ "$arg" =~ (-h)|(--help) ]]; then
    usage
  fi
done

# Parse Options
while getopts "d:t:h:" opt; do
  case $opt in
    d ) DD="$OPTARG"  ;;
    t ) TD="$OPTARG"  ;;
    * )
  esac
done
shift $((OPTIND - 1))

# Our Number to parse
NUMBER="$1"

if [[ ("$#" == 0) || ("$NUMBER" == "") ]]; then
  # If Number is empty, try reading from stdin
  NUMBER="$(</dev/stdin)"
  nicenumber "$NUMBER"
  exit 0
else
  # Otherwise use NUMBER
  nicenumber "$NUMBER"
  exit 0
fi

# EOF
