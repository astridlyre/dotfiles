#!/usr/bin/env bash

# Ansi color codes
BOLD_GREEN="\e[1;32m"
BOLD_WHITE="\e[1;37m"
BOLD_RED="\e[1;31m"
RESET_TXT="\e[0m"

function usage() {
	printf "Usage: %s [-g]\n\n" "${0}"
	printf "\t g | git - initialize a git repo as well\n"
}

function error_exit() {
	printf "${BOLD_RED}%s${RESET_TXT}\n" "${*}"
	exit 1
}

printf "${BOLD_WHITE}Create git repo? (y|n): ${RESET_TXT}"
read -r REPLY

if [[ "${REPLY}" =~ (y|Y) ]]; then
	git init || error_exit "Unable to create git repo"
fi

printf "${BOLD_GREEN}%s${RESET_TXT}\n" "Creating .gitignore"
echo "node_modules" >.gitignore || error_exit "Unable to create .gitignore"

printf "${BOLD_GREEN}%s${RESET_TXT}\n" "Initializing package.json"
cat <<EOF >package.json
{
  "name": "$(basename "${PWD}")",
  "version": "1.0.0",
  "description": "",
  "main": "build/bundle.js",
  "type": "module",
  "scripts": {
	"start": "node index.js",
	"clean": "rm -rf ./build/*",
    "test": "mocha",
	"dev": "rollup -c --watch"
  },
  "keywords": [],
  "author": "Erin Burton",
  "license": "MIT",
  "devDependencies": {}
}
EOF

printf "${BOLD_GREEN}%s${RESET_TXT}\n" "Installing packages"
npm install --save-dev \
	@ebflat9/fp \
	@rollup/plugin-babel \
	@rollup/plugin-node-resolve \
	@rollup/plugin-commonjs \
	@rollup/plugin-typescript \
	@babel/core \
	@babel/preset-typescript \
	mocha \
	eslint_d \
	typescript \
	@typescript-eslint/parser \
	@typescript-eslint/eslint-plugin || error_exit "Unable to install packages"

printf "${BOLD_GREEN}%s${RESET_TXT}\n" "Creating base rollup config"
cat <<EOF >rollup.config.js || error_exit "Unable to create rollup.config.js"
import resolve from '@rollup/plugin-node-resolve'
import babel from '@rollup/plugin-babel'
import typescript from '@rollup/plugin-typescript'
import commonjs from '@rollup/plugin-commonjs'

export default {
	input: 'src/index.ts',
	output: {
		file: 'build/bundle.js',
		format: 'esm'
	},
	inlineDynamicImports: true,
	treeshake: true,
	plugins: [typescript(), resolve(), commonjs(), babel({babelHelpers: 'bundled'})]
}
EOF

mkdir src
touch src/index.ts
mkdir build

cat <<EOF >babel.config.json || error_exit "Unable to create babel.config.json"
{
	"presets": ["@babel/preset-typescript"]
}
EOF

cat <<EOF >tsconfig.json || error_exit "Unable to create tsconfig.json"
{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "noFallthroughCasesInSwitch": true,
    "experimentalDecorators": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "moduleResolution": "node",
    "esModuleInterop": true,
    "noUnusedLocals": true,
    "noImplicitAny": true,
    "declarationDir": "dist/types",
    "declaration": true,
    "target": "esnext",
    "module": "esnext",
    "strict": true,
	"jsx": "react"
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "build"
  ]
}
EOF

printf "${BOLD_GREEN}%s${RESET_TXT}\n" "Creating base .eslintrc.json"
cat <<EOF >.eslintrc.json || error_exit "Unable to create .eslintrc.json"
{
	"root": true,
    "env": {
        "es2021": true,
        "shared-node-browser": true,
        "node": true,
        "browser": true,
        "mocha": true
    },
    "extends": [
		"eslint:recommended",
		"plugin:@typescript-eslint/recommended"
    ],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaVersion": "latest"
	},
	"plugins": [
		"@typescript-eslint"
	],
    "rules": {
        "no-promise-executor-return": "warn",
        "require-atomic-updates": "error",
        "accessor-pairs": "warn",
        "array-callback-return": "error",
        "complexity": "error",
        "consistent-return": "warn",
        "curly": [
            "error",
            "multi-line"
        ],
        "dot-notation": "warn",
        "eqeqeq": [
            "error",
            "smart"
        ],
        "grouped-accessor-pairs": [
            "error",
            "getBeforeSet"
        ],
        "no-magic-numbers": [
            "warn",
            {
                "ignoreArrayIndexes": true,
                "enforceConst": true,
                "ignore": [
                    1,
                    -1,
                    0
                ]
            }
        ],
        "no-unused-vars": "warn",
        "no-param-reassign": "warn",
        "prefer-promise-reject-errors": "error",
        "no-var": "error",
        "prefer-const": [
            "warn",
            {
                "destructuring": "any"
            }
        ],
        "no-unneeded-ternary": "error",
        "no-duplicate-imports": [
            "error",
            {
                "includeExports": true
            }
        ],
        "no-constant-condition": [
            "error",
            {
                "checkLoops": false
            }
        ],
        "func-names": [
            "warn",
            "always"
        ],
        "object-shorthand": "warn"
    }
}
EOF

printf "${BOLD_WHITE}%s${RESET_TXT}\n" "Initialization completed"
